{"version":3,"sources":["jquery.scrollmenu.js"],"names":["$","fn","scrollmenu","menu","elem","this","opts","deepIndex","isJumpingTo","init","settings","extend","defaults","data","items","find","start","not","disableHeaderSelector","build","addClass","menuClass","window","scroll","onScroll","click","e","preventDefault","jumpTo","hash","substr","options","each","index","item","buildAnchor","li","append","buildReference","depth","deepSelector","replace","str","parseInt","deepItems","nextUntil","tagName","length","a","text","attr","id","p1","p2","toLowerCase","generatedId","document","getElementById","oldId","generateUniqueId","prefix","suffix","Math","floor","random","Date","now","getCurrent","current","filter","offset","top","scrollTop","nextAll","toggleWhileJumping","setClasses","activeLi","parent","activeClass","parents","parentClass","add","siblings","removeClass","speed","jumpSpeed","offsetTop","animate","location","methods","refresh","destroy","removeAttr","remove","get","apply","arguments","Array","prototype","slice","call","jQuery"],"mappings":"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","file":"jquery.scrollmenu.js","sourcesContent":["/*!\r\n * jquery.scrollmenu.js v0.5.0 - 2015-11-04\r\n * Copyright 2014 Christoph Heich | ...\r\n * Released under the MIT license | ...\r\n */\r\n\r\n(function($) {\r\n\r\n    $.fn.scrollmenu = function() {\r\n\r\n        /**\r\n         * @type {jQuery Object}\r\n         */\r\n        var elem = $(this);\r\n\r\n        /**\r\n         * @type {Object}\r\n         */\r\n        var opts = {};\r\n\r\n        /**\r\n         * Current index and deep index.\r\n         *\r\n         * @type {Integer}\r\n         */\r\n        var index = 0;\r\n        var deepIndex = 0;\r\n\r\n        /**\r\n         * Whole menu.\r\n         * \r\n         * @type {jQuery Object}\r\n         */\r\n        var menu;\r\n\r\n\r\n        /**\r\n         * Set to 'true' while jumping to a header.\r\n         * \r\n         * @type {boolean}\r\n         */\r\n        var isJumpingTo = false;\r\n\r\n        /**\r\n         * ==========================================================\r\n         * = Private functions\r\n         * ==========================================================\r\n         */\r\n\r\n        /**\r\n         * Initialization\r\n         *\r\n         * @param {object} settings - Options that should overwrite the defaults.\r\n         */\r\n        var init = function(settings) {\r\n            opts = $.extend(true, {}, $.fn.scrollmenu.defaults, settings);\r\n            elem.data('scrollmenu', opts);\r\n\r\n            // Find all first level items\r\n            var items = $(elem.find(opts.start).not(opts.disableHeaderSelector));\r\n            menu = build(items).addClass(opts.menuClass);\r\n            \r\n            // Bind onScroll event\r\n            $(window).scroll(function() {\r\n                onScroll();\r\n            });\r\n            \r\n            // Bind jumpTo event to menu anchors\r\n            menu.find('a').click(function(e) {\r\n                e.preventDefault();\r\n                jumpTo(this.hash.substr(1));\r\n            });\r\n            \r\n            // Bind options to container element\r\n            elem.data('scrollmenu', {\r\n                options: opts,\r\n                menu: menu,\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Build list recursively\r\n         *\r\n         * @param {jQuery object} items - All headers in this level.\r\n         * @return {jQuery object} Unordered list\r\n         */\r\n        var build = function(items) {\r\n            var menu = $('<ul />');\r\n\r\n            // Current items\r\n            items.each(function(index, item) {\r\n                item = buildAnchor($(item));\r\n                var li = $('<li />');\r\n                li.append(buildReference($(item)));\r\n\r\n                if (deepIndex < opts.depth) {\r\n                    // Deep selector\r\n                    var deepSelector = opts.start.replace(/\\d+/, function(str) {\r\n                        return parseInt(str) + deepIndex + 1;\r\n                    });\r\n\r\n                    // Deep items\r\n                    var deepItems = item.nextUntil(item[0].tagName, deepSelector).not(opts.disableHeaderSelector);\r\n                    if (deepItems.length > 0) {\r\n                        deepIndex++;\r\n                        li.append(build(deepItems));\r\n                        deepIndex--;\r\n                    }\r\n                }\r\n\r\n                menu.append(li);\r\n            });\r\n\r\n            return menu;\r\n        };\r\n\r\n        /**\r\n         * Build an `<a>` element from an item.\r\n         *\r\n         * @param {jQuery object} item\r\n         * @return {jQuery object}\r\n         */\r\n        var buildReference = function(item) {\r\n            var a = $('<a />');\r\n            \r\n            a.text(item.text());\r\n            a.attr('href', '#' + item.attr('id'));\r\n\r\n            return a;\r\n        };\r\n\r\n        /**\r\n         * Build an anchor on the current item.\r\n         *\r\n         * @param {jQuery object} item         \r\n         * @return {jQuery object}         \r\n         */\r\n        var buildAnchor = function(item) {\r\n            var id = item.attr('id');\r\n            \r\n            // Generate a new ID, if not exists\r\n            if (typeof id == 'undefined') {\r\n                var id = item.text().replace(/(\\s+)|(#+)/g, function(str, p1, p2) {\r\n                    if (p1) return '-'; // Replace spaces\r\n                    if (p2) return ''; // Replace '#'\r\n                }).toLowerCase();\r\n                item.data('scrollmenu', { generatedId: id });\r\n            }\r\n\r\n            // Make it unique, if necessary\r\n            if (!id || $(document.getElementById(id)).length) {\r\n                var data = { oldId: id };\r\n                \r\n                id = generateUniqueId(id + '-');\r\n                \r\n                data.generatedId = id;\r\n                item.data('scrollmenu', data);\r\n            }\r\n            \r\n            item.attr('id', id);\r\n            return item;\r\n        };\r\n        \r\n        /**\r\n         * Generate a new unique id\r\n         *\r\n         * @param {String} prefix\r\n         * @param {String} suffix\r\n         * @return {String}\r\n         */\r\n        var generateUniqueId = function(prefix, suffix) {\r\n            prefix = typeof prefix !== 'undefined' ? prefix : '';\r\n            suffix = typeof prefix !== 'undefined' ? prefix : '';\r\n        \r\n            var id = Math.floor(Math.random() * 26) + Date.now();\r\n            if ($(document.getElementById(id)).length) {\r\n                return generateUniqueId(prefix, suffix);\r\n            }\r\n            return prefix + id + suffix;\r\n        };\r\n        \r\n        /** \r\n         * Get current ID \r\n         * \r\n         * @param {jQuery object}\r\n         */\r\n        var getCurrent = function() {\r\n            var current = false;\r\n\r\n            // Loop through all IDs, filtered by headers\r\n            $('[id]').filter(':header').each(function() {\r\n                if ($(this).offset().top <= $(window).scrollTop() + opts.offset) {\r\n                    if ($(this).nextAll('[id]').length == 0 || $(this).nextAll('[id]').offset().top > $(window).scrollTop() + opts.offset) {                    \r\n                        current = $(this).attr('id');                        \r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n            \r\n            return current;\r\n        };\r\n        \r\n        /** \r\n         * Bind scroll event\r\n         */\r\n        var onScroll = function() {\r\n            // Toggle classes while scrolling (special on jumping)\r\n            if (!(!opts.toggleWhileJumping && isJumpingTo)) {\r\n                setClasses();\r\n            }\r\n        };\r\n        \r\n        /**\r\n         * Set and reset all classes as required\r\n         */\r\n        var setClasses = function() {\r\n            var current = getCurrent();\r\n        \r\n            // Find active `<li>`.\r\n            var activeLi = menu.find('li a').filter(function() {\r\n                return $(this).attr('href') == '#' + current;\r\n            }).parent();          \r\n        \r\n            // Add `.active` class to current.\r\n            activeLi.addClass(opts.activeClass);\r\n            \r\n            // Add `.active` class to parent.\r\n            var parent = activeLi.parents('li').addClass(opts.parentClass);\r\n            \r\n            // First, remove all `.active` classes.\r\n            activeLi.add(parent).siblings().removeClass(opts.activeClass);              \r\n        };\r\n        \r\n        /**\r\n         * Jump to a heading\r\n         *\r\n         * @param {string} id - The ID to jump to\r\n         * @param {integer} Scroll speed\r\n         */\r\n        var jumpTo = function(id, speed) {\r\n            speed = typeof speed !== 'undefined' ? speed : opts.jumpSpeed;\r\n            \r\n            isJumpingTo = true;\r\n            var offsetTop = $(document.getElementById(id)).offset().top;\r\n            \r\n            $('html, body').animate({\r\n                scrollTop: offsetTop,\r\n            }, speed, function() {            \r\n                // Set location.hash value after animations\r\n                window.location.hash = id;\r\n                \r\n                if (!opts.toggleWhileJumping) {\r\n                    setClasses();                    \r\n                }\r\n                \r\n                isJumpingTo = false;\r\n            });\r\n        };\r\n\r\n        /** \r\n         * ==========================================================\r\n         * = Public Methods\r\n         * ==========================================================\r\n         */\r\n        var methods = {\r\n\r\n            /**\r\n             * Refresh\r\n             *\r\n             * @param {object} settings - New settings\r\n             */\r\n            refresh: function(settings) {\r\n                // Reset all\r\n                methods.destroy();\r\n                \r\n                // Start new\r\n                if (typeof settings === 'undefined') {\r\n                    settings = opts;\r\n                }\r\n                init(settings);\r\n            },\r\n\r\n            /**\r\n             * Destroyer\r\n             *\r\n             * Remove all data, classes and inserted elements.\r\n             */\r\n            destroy: function() {                \r\n                // Get all headers, filter by data.scrollmenu\r\n                $(':header').filter(function() {\r\n                    return !!$(this).data('scrollmenu');\r\n                }).each(function() {\r\n                    var data = $(this).data('scrollmenu');\r\n                    \r\n                    // Reset old ID, if set (and no new one is set)\r\n                    if (('generatedId' in data) && data.generatedId == $(this).attr('id')) {\r\n                        if ('oldId' in data) {\r\n                            $(this).attr('id', data.oldId);\r\n                        }else{\r\n                            $(this).removeAttr('id');\r\n                        }\r\n                    }\r\n                });\r\n            \r\n                // Remove inserted menu\r\n                menu.remove();\r\n            },\r\n\r\n            /**\r\n             * Get the built menu\r\n             *\r\n             * @return {jQuery Object} Unordered list\r\n             */\r\n            get: function() {\r\n                return menu;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * ==========================================================\r\n         * = Plugin\r\n         * ==========================================================\r\n         */\r\n        \r\n        if (typeof elem.data('scrollmenu') === 'undefined') {\r\n            // Init\r\n            init.apply(this, arguments);\r\n        }else{\r\n            // Retrieve data\r\n            data = elem.data('scrollmenu');\r\n            opts = data.options;\r\n            menu = data.menu;\r\n\r\n            // Find methods\r\n            if (arguments[0] in methods) {\r\n                return methods[arguments[0]].apply(this, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    };\r\n\r\n    /**\r\n     * ==========================================================\r\n     * = Default Options\r\n     * ==========================================================\r\n     */\r\n    $.fn.scrollmenu.defaults = {\r\n        start:                  'h2',                       // Start at this header.\r\n        depth:                  2,                          // Depth from `start` point; 0 for disabling depth selectors.\r\n        jumpSpeed:              400,                        // Scroll speed when click on a menu item; 0 for disabling.\r\n        offset:                 0,                          // Scroll position offset; the higher the earlier is the header selected.\r\n        toggleWhileJumping:     false,                      // Toggle classes while jumping (scrolling) to a header.\r\n        disableHeaderSelector:  '[data-disable=\"true\"]',    // Selector to disable a header. Will be used within the `:not()` function.\r\n        activeClass:            'active',                   // Class name for current list item.\r\n        parentClass:            'active',                   // Class name for parent list item of the current item.\r\n        menuClass:              'menu',                     // Class name for the root list.\r\n    };\r\n}(jQuery));\r\n"],"sourceRoot":"/source/"}